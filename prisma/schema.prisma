// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/manga-management.db"
}

// Unified Content model
model Content {
  id            String   @id
  title         String
  volumes       Int      @default(0)
  coverImage    String?
  addedDate     DateTime
  lastModified  DateTime
  directoryPath String
  lastScanned   DateTime
  scanStatus    String   @default("pending")
  errorMessage  String?
  contentType   String   @default("manga") // "manga" | "lightnovel"

  // Relations
  contentVolumes   Volume[]
  userData         UserContentMetadata?
  readingHistory   ReadingHistory[]
  contentTags      ContentTag[]
  collectionContent CollectionContent[]
}

// Unified Volume model
model Volume {
  id            String   @id
  contentId     String
  volumeNumber  Int
  volumeTitle   String
  filePath      String
  coverImage    String?
  pageCount     Int      @default(0)
  addedDate     DateTime
  lastModified  DateTime
  volumeUuid    String
  previewImages String?  // JSON array of preview image paths
  volumeType    String   @default("manga") // "manga" | "epub"
  metadata      String?  // JSON metadata for epub volumes

  // Relations
  content          Content          @relation(fields: [contentId], references: [id], onDelete: Cascade)
  readingHistory   ReadingHistory[]
  pages            Page[]

  @@index([contentId])
}

// Page model - represents a single page in a volume
model Page {
  id          String   @id @default(cuid())
  volumeId    String
  pageNumber  Int
  imagePath   String
  width       Int
  height      Int
  
  // Relations
  volume      Volume    @relation(fields: [volumeId], references: [id], onDelete: Cascade)
  textBlocks  TextBlock[]
  
  @@unique([volumeId, pageNumber])
  @@index([volumeId])
}

// TextBlock model - represents text on a page
model TextBlock {
  id          String   @id @default(cuid())
  pageId      String
  boxX        Float
  boxY        Float
  boxWidth    Float
  boxHeight   Float
  text        String   // JSON array of lines
  fontSize    Float
  isVertical  Boolean  @default(false)
  linesCoords String?  // JSON array of line coordinates
  
  // Relations
  page        Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  @@index([pageId])
}

// Reading Position model - unified for both manga pages and epub positions
model ReadingHistory {
  id            String   @id
  contentId     String
  volumeId      String
  position      Int      // Page number for manga, percentage (0-100) for epub
  chapterHref   String?  // Only used for epub volumes
  timestamp     DateTime

  // Relations
  content       Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  volume        Volume   @relation(fields: [volumeId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([volumeId])
}

// Tag model
model Tag {
  id    String @id
  name  String
  color String?
  type  String // "genre" | "content" | "custom"

  // Relations
  contentTags ContentTag[]
}

// Collection model
model Collection {
  id          String   @id
  name        String
  description String?
  coverImage  String?
  createdAt   DateTime
  updatedAt   DateTime

  // Relations
  collectionContent CollectionContent[]
}

// ContentTag join model
model ContentTag {
  contentId String
  tagId   String

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contentId, tagId])
  @@index([contentId])
  @@index([tagId])

  @@unique([contentId, tagId])
}

// CollectionContent join model
model CollectionContent {
  collectionId String
  contentId    String

  // Relations
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  content    Content    @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@id([collectionId, contentId])
  @@index([collectionId])
  @@index([contentId])

  @@unique([collectionId, contentId])
}

// UserContentMetadata model
model UserContentMetadata {
  id           String   @id
  contentId    String   @unique
  rating       Float?
  progress     Int?
  status       String?  // "reading" | "completed" | "on-hold" | "dropped" | "plan-to-read"
  notes        String?
  favorite     Boolean  @default(false)
  isNsfw       Boolean  @default(false)
  customCover  String?
  author       String?
  artist       String?
  releaseYear  Int?
  publisher    String?
  updatedAt    DateTime

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

// Settings model
model Settings {
  id                  String   @id
  darkMode            Boolean  @default(true)
  invertColors        Boolean  @default(false)
  rightToLeft         Boolean  @default(false)
  hasCover            Boolean  @default(false)
  showTooltips        Boolean  @default(true)
  ankiEnabled         Boolean  @default(true)
  fontSize            String   @default("auto") // "auto" or number as string
  readingMode         String   @default("singlePage") // "singlePage" | "doublePage" | "longStrip"
  animatePageTurns    Boolean  @default(true)
  highlightColor      String   @default("#FFD700")
  readerBackground    String   @default("#FFFFFF")
  pageMargin          Int      @default(20)
  furiganaDisplay     String   @default("hover") // "always" | "hover" | "never"
  autoSavePosition    Boolean  @default(true)
  dictionaryProvider  String   @default("jisho") // "jisho" | "google" | "custom"
  customDictionaryUrl String?
  pageNavigationMethod String   @default("click") // "click" | "tap" | "swipe" | "arrows"
  updatedAt           DateTime
} 